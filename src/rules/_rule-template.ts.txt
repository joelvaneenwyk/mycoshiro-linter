// Basic Rule template
//
// Perform text replace `RuleTemplate` with your rule, e.g. `MyNewRule`
// Then decided on the keys for the rule in the en.ts locale and add those values to it.
// Once the values are present in the locale file, replace `RULE_NAME_IN_EN_LOCALE_FILE` with the key in the locale file.
// Then do the same for any properties replacing `PROPERTY_NAME_IN_LOCALE_FILE` with the associated value.
// And save the file as `my-new-rule.ts`

import {Options, RuleType} from '../rules';
import RuleBuilder, {ExampleBuilder, OptionBuilderBase, TextOptionBuilder} from './rule-builder';
import dedent from 'ts-dedent';

class RuleTemplateOptions implements Options {
  someProperty: string = 'some default value';

  @RuleBuilder.noSettingControl()
    somePropertyThatDoesNotHaveCorrespondingSettingControl: string = 'some other default value';
}

@RuleBuilder.register
export default class RuleTemplate extends RuleBuilder<RuleTemplateOptions> {
  constructor() {
    super({
      nameKey: 'rules.RULE_NAME_IN_EN_LOCALE_FILE.name',
      descriptionKey: 'rules.RULE_NAME_IN_EN_LOCALE_FILE.description',
      type: RuleType.TYPE_HERE,
    });
  }
  get OptionsClass(): new () => RuleTemplateOptions {
    return RuleTemplateOptions;
  }
  apply(text: string, options: RuleTemplateOptions): string {
    return '{PUT_PROPER_IMPLEMENTATION}';
  }
  get exampleBuilders(): ExampleBuilder<RuleTemplateOptions>[] {
    return [
      new ExampleBuilder({
        description: 'Example',
        before: dedent`
          Before
        `,
        after: dedent`
          After
        `
      })
    ];
  }
  get optionBuilders(): OptionBuilderBase<RuleTemplateOptions>[] {
    return [
      new TextOptionBuilder({
        OptionsClass: RuleTemplateOptions,
        nameKey: 'rules.RULE_NAME_IN_EN_LOCALE_FILE.PROPERTY_NAME_IN_LOCALE_FILE.name',
        descriptionKey: 'rules.RULE_NAME_IN_EN_LOCALE_FILE.PROPERTY_NAME_IN_LOCALE_FILE.description',
        optionsKey: 'someProperty'
      })
    ];
  }
}
