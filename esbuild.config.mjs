import builtins from 'builtin-modules';
import esbuild from 'esbuild';
import importGlobPlugin from 'esbuild-plugin-import-glob';
import { replace } from 'esbuild-plugin-replace';
import process from 'process';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;
const utilityPlaceholderMocks = `
document = {
    createElement: function() {},
};
`;
const isProduction = process.argv[2] === 'production';
const entryPoints = ['src/main.ts', 'src/docs.ts', 'src/translation-helper.ts'];
const replacePlugin = replace({
  values: {
    // update usage of moment from obsidian to the node implementation of moment we have
    "import {moment} from 'obsidian';": "import moment from 'moment';",
    // remove the use of obsidian in the options to allow for docs.js to run
    "import {Setting} from 'obsidian';": '',
    // remove the use of obsidian in settings helper to allow for docs.js to run
    "import {Component, MarkdownRenderer} from 'obsidian';": ''
  },
  delimiters: ['', '']
});

async function getBuildSettings(entryPoint) {
  const isPluginMain = entryPoint?.toString().includes('main.ts');
  const esbuildSettings = {
    banner: {
      js: isPluginMain ? banner : banner + utilityPlaceholderMocks
    },
    entryPoints: [entryPoint],
    plugins: [importGlobPlugin.default()],
    bundle: true,
    external: ['obsidian', ...builtins],
    format: 'cjs',
    target: 'es2020',
    sourcemap: isProduction ? false : 'inline',
    minify: isProduction,
    treeShaking: true,
    outdir: 'dist'
  };

  if (!isPluginMain) {
    esbuildSettings.plugins.push(replacePlugin);
  }

  try {
    await esbuild.build(esbuildSettings);
    console.log(`Mycoshiro Linter: Built '${entryPoint}'`);
  } catch (error) {
    console.error(`Mycoshiro Linter: Failed to build '${entryPoint}'`, error);
  }
}

await Promise.all(entryPoints.map(getBuildSettings))
  .then(() => {
    console.log('Mycoshiro Linter: Built all dependencies.');
  })
  .catch(() => {
    console.error('Mycoshiro Linter: Failed to build JavaScript output files.');
    process.exit(1);
  })
  .finally(() => {
    process.exit(0);
  });
